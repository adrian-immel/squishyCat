    #include <Arduino.h>
    #include <Wire.h>
    #include <Adafruit_LPS2X.h>
    #include <Adafruit_Sensor.h>
    #include "led.h"

    Adafruit_LPS22 lps;
    sensors_event_t pressure;
    sensors_event_t temp;
    bool isBeeingSquished = 0;

    #define pressureThreshold 2

    // Threshold definitions
    #define PRESSURE_THRESHOLD 3             // Additional pressure to set the dynamic threshold
    #define MOVING_AVERAGE_WINDOW 100        // Number of samples for the moving average

    // Variables for the moving average calculation
    float pressureBuffer[MOVING_AVERAGE_WINDOW] = {0};
    int pressureIndex = 0;
    int pressureCount = 0;
    float pressureSum = 0;

    float dynamicPressureThreshold;

    int32_t squishSetup(){
        
        if (!lps.begin_I2C(0x5D, &Wire)){
            Serial.println("Couldnt start pressure sensor");
            return 1;
        }
        lps.setDataRate(LPS22_RATE_75_HZ);
        lps.getEvent(&pressure, &temp);
        dynamicPressureThreshold = (pressure.pressure + pressureThreshold);

        // Initialize the moving average buffer
        for (int i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
            lps.getEvent(&pressure, &temp);
            pressureBuffer[i] = pressure.pressure;
            pressureSum += pressure.pressure;
            }
        pressureIndex = 0;
        pressureCount = MOVING_AVERAGE_WINDOW;
        // Calculate the initial dynamic pressure threshold
        dynamicPressureThreshold = (pressureSum / MOVING_AVERAGE_WINDOW) + PRESSURE_THRESHOLD;

        return 0;

    }

    void updateMovingAverage(float newPressure) {
        // Subtract the oldest pressure value from the sum
        pressureSum -= pressureBuffer[pressureIndex];
  
        // Add the new pressure value to the buffer and sum
        pressureBuffer[pressureIndex] = newPressure;
        pressureSum += newPressure;
  
        // Move to the next index, wrapping around if necessary
        pressureIndex = (pressureIndex + 1) % MOVING_AVERAGE_WINDOW;
  
        // Update the dynamic pressure threshold based on the new average
        dynamicPressureThreshold = (pressureSum / MOVING_AVERAGE_WINDOW) + PRESSURE_THRESHOLD;
    }


    void squishLoop(){

        lps.getEvent(&pressure, &temp);
        if (isBeeingSquished){
            if(pressure.pressure <= dynamicPressureThreshold){
            fastColorChange(0);
            isBeeingSquished = 0;
            }
            
        }
        else{
            if((pressure.pressure > dynamicPressureThreshold) && millis() > 3000){
                //wait 2 seconds as the sensor gives bogus data during start so we wait to not get in a infint loop
                fastColorChange(1);
                isBeeingSquished = 1;
            }
            updateMovingAverage(pressure.pressure);

        }
        // Debugging: Print the current pressure and dynamic threshold
        Serial.print("Pressure: ");
        Serial.print(pressure.pressure);
        Serial.print(" | Dynamic Threshold: ");
        Serial.println(dynamicPressureThreshold);
    }

    bool isSquished(){
        return isBeeingSquished;
    }